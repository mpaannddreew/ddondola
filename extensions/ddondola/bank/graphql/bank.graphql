enum TransactionType {
    DEBIT @enum(value: "debit")
    CREDIT @enum(value: "credit")
}

type Account {
    id: ID!
    holder: Muddondozi
    code: String! @method(name: "miniCode")
    balance: Int! @method(name: "balance")
    actualBalance: Int! @method(name: "actualBalance")
    escrows(type: String): [Escrow!] @paginate(builder: "Bank\\Http\\GraphQL\\Queries\\BankQuery@escrows")
    payments: [Payment!] @paginate(builder: "Bank\\Http\\GraphQL\\Queries\\BankQuery@payments")
    transactions(type: TransactionType): [Transaction!] @paginate(builder: "Bank\\Http\\GraphQL\\Queries\\BankQuery@transactions")
    withdrawRequests(type: String): [WithdrawRequest!] @paginate(builder: "Bank\\Http\\GraphQL\\Queries\\BankQuery@withdrawRequests")
    created_at: DateTime!
    updated_at: DateTime!
}

type Escrow {
    id: ID!
    source: Account! @belongsTo
    destination: Account! @belongsTo
    code: String! @method(name: "miniCode")
    amount: String!
    completed: Boolean!
    reversed: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
}

type Payment {
    id: ID!
    account: Account! @belongsTo
    code: String! @method(name: "miniCode")
    reference: String!
    status: String
    created_at: DateTime!
    updated_at: DateTime!
}

type Transaction {
    id: ID!
    account: Account! @belongsTo
    code: String! @method(name: "miniCode")
    amount: String!
    debit: Boolean!
    credit: Boolean!
    note: String
    created_at: DateTime!
    updated_at: DateTime!
}

type Recipient {
    account_bank: String!
    account_numer: String!
}

type WithdrawRequest {
    id: ID!
    account: Account! @belongsTo
    code: String! @method(name: "miniCode")
    amount: String!
    recipient: Recipient!
    processed: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
}

input RecipientInput {
    account_bank: String!
    account_numer: String!
}

input WithdrawInput {
    recipient: RecipientInput!
    amount: String!
}

extend type Query @middleware(checks: ["auth:api"]) {
    account(accountHolder: String): Account! @field(resolver: "Bank\\Http\\GraphQL\\Queries\\BankQuery@account")
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    withdrawRequest(accountHolder: String withdraw: WithdrawInput! password: String!): WithdrawRequest! @field(resolver: "Bank\\Http\\GraphQL\\Mutations\\BankMutator@withdrawRequest")
    makeDeposit(accountHolder: String reference: String!): Payment! @field(resolver: "Bank\\Http\\GraphQL\\Mutations\\BankMutator@makeDeposit")
}