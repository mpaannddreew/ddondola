type ShopSettings {
    discount: String
}

type ShopCategory {
    id: ID!
    code: String!
    name: String!
    description: String
    shops: [Shop!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedShops")
    shopCount: Int! @method(name: "shopCount")
    productCount: Int! @method(name: "productCount")
    created_at: DateTime!
    updated_at: DateTime!
}

type Shop implements Muddondozi {
    id: ID!
    code: String!
    type: String! @method(name: "type")
    name: String!
    category: ShopCategory! @belongsTo
    owner: User! @belongsTo
    profile: Profile!
    account: Account! @hasOne
    settings: ShopSettings!
    active: Boolean! @method(name: "active")
    accountBalance: Int! @method(name: "accountBalance")
    likes: Int! @method(name: "likeCount")
    avatar: Image! @method(name: "avatar")
    coverPicture: Image! @method(name: "coverPicture")
    categories(name: String): [ProductCategory!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedCategories")
    subcategories(name: String): [ProductSubCategory!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedSubcategories")
    subCategoriesCount: Int! @method(name: "subCategoriesCount")
    brands(name: String): [ProductBrand!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedBrands")
    brandCount: Int! @method(name: "brandCount")
    reviews: [Review!] @paginate(builder: "Activity\\Http\\GraphQL\\Queries\\ActivityQuery@paginatedReviews")
    reviewCount: Int! @method(name: "reviewCount")
    averageRating: String! @method(name: "averageRating")
    products(filters: ProductFilter inventory: Boolean): [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedProducts")
    productCount: Int! @method(name: "productCount")
    activeOffers: [Product!] @method(name: "activeOffers")
    currencyCode: String! @method(name: "currencyCode")
    messages: [Message!] @paginate(builder: "Messenger\\Http\\GraphQL\\Queries\\MessengerQuery@messages")
    unreadMessageCount: Int! @method(name: "unreadMessageCount")
    conversations(search: String): [Conversation!] @paginate(builder: "Messenger\\Http\\GraphQL\\Queries\\MessengerQuery@conversations")
    contacts(search: String): [User!] @paginate(builder: "Messenger\\Http\\GraphQL\\Queries\\MessengerQuery@contacts")
    orders(search: String): [Order!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@shopOrders")
    orderCount: Int! @method(name: "orderCount")
    created_at: DateTime!
    updated_at: DateTime!
}

type ProductCategory {
    id: ID!
    code: String!
    name: String!
    shop: Shop! @belongsTo
    description: String
    categories: [ProductSubCategory!] @hasMany
    categoryCount: Int! @method(name: "categoryCount")
    products(filters: ProductFilter): [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedProducts")
    productCount: Int! @method(name: "productCount")
    created_at: DateTime!
    updated_at: DateTime!
}

type ProductSubCategory {
    id: ID!
    code: String!
    name: String!
    category: ProductCategory! @belongsTo
    description: String
    products(filters: ProductFilter): [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedProducts")
    productCount: Int! @method(name: "productCount")
    created_at: DateTime!
    updated_at: DateTime!
}

type ProductBrand {
    id: ID!
    code: String!
    name: String!
    shop: Shop! @belongsTo
    description: String
    products(filters: ProductFilter): [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedProducts")
    productCount: Int! @method(name: "productCount")
    created_at: DateTime!
    updated_at: DateTime!
}

type Attribute {
    name: String!
    value: String!
}

type ProductSettings {
    attributes: [Attribute!]!
}

type CartPivot {
    id: ID!
    price: String!
    quantity: String!
    sum: Int! @method(name: "sum")
    created_at: DateTime!
    updated_at: DateTime!
}

type OrderPivot {
    id: ID!
    price: String!
    quantity: String!
    sum: Int! @method(name: "sum")
    receipt_confirmed: Boolean!
    delivery_confirmed: Boolean!
    cancelled: Boolean!
    cancelled_by: String
    created_at: DateTime!
    updated_at: DateTime!
}

type Stock {
    id: ID!
    quantity: String!
    note: String
    in: Boolean!
    out: Boolean!
    product: Product! @belongsTo
    user: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

input StockUpdate {
    in: Boolean!
    out: Boolean!
    quantity: Int!
    note: String!
}

type Product {
    id: ID!
    code: String!
    name: String!
    category: ProductCategory! @method(name: "category")
    subcategory: ProductSubCategory! @belongsTo
    brand: ProductBrand @belongsTo
    price: String!
    description: String
    quantity: Int! @method(name: "quantity")
    active: Boolean!
    settings: ProductSettings!
    offers(ordering: String): [ProductOffer!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@productOffers")
    relatedProducts: [Product!] @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@relatedProducts")
    reviews: [Review!] @paginate(builder: "Activity\\Http\\GraphQL\\Queries\\ActivityQuery@paginatedReviews")
    stock(type: String): [Stock] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedStock")
    reviewCount: Int! @method(name: "reviewCount")
    averageRating: String! @method(name: "averageRating")
    orders: [Order!] @belongsToMany(type: "paginator")
    orderCount: Int! @method(name: "orderCount")
    carts: [Cart!] @belongsToMany(type: "paginator")
    discount: Int! @method(name: "discount")
    discountedPrice: Int! @method(name: "discountedPrice")
    currencyCode: String! @method(name: "currencyCode")
    shop: Shop! @belongsTo
    images: [Image!] @method(name: "productImages")
    cartPivot: CartPivot
    orderPivot: OrderPivot
    created_at: DateTime!
    updated_at: DateTime!
}

type Cart {
    id: ID!
    products: [Product!] @hasMany
    productCount: Int! @method(name: "productCount")
    sum: Int! @method(name: "sum")
    created_at: DateTime!
    updated_at: DateTime!
}

type Order {
    id: ID!
    code: String!
    sum(shop: String): Int! @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@orderSum")
    activeSum(shop: String): Int! @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@activeSum")
    by: User! @belongsTo
    paidFor: Boolean! @rename(attribute: "paid_for")
    products(shop: String): [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@orderProducts")
    productCount: Int! @method(name: "productCount")
    currencyCode: String! @method(name: "currencyCode")
    firstProduct(shop: String): Product! @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@firstProduct")
    cancelled(shop: String): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@cancelled")
    created_at: DateTime!
    updated_at: DateTime!
}

type ProductOffer {
    id: ID!
    product: Product! @belongsTo
    discount: String!
    start_date: Date!
    end_date: Date!
    cancelled: Boolean!
    active: Boolean! @method(name: "isActive")
    started: Boolean! @method(name: "started")
    ended: Boolean! @method(name: "ended")
    created_at: DateTime!
    updated_at: DateTime!
}

input ShopResource {
    name: String!
    description: String
}

input NewOffer {
    discount: String!
    start_date: String!
    end_date: String!
}

input NewAttribute {
    name: String!
    value: String!
}

input ProductFilter {
    name: String
    ordering: String
    brandIds: String
    subCategoryIds: String
    categoryIds: String
}

input ShopFilter {
    name: String
    ordering: String
    categoryIds: String
}

enum Action {
    CONFIRM @enum(value: "confirm")
    CANCEL @enum(value: "cancel")
}

enum Actor {
    BUYER @enum(value: "buyer")
    SELLER @enum(value: "seller")
}

input OrderUpdate {
    order: String!
    product: String!
    action: Action!
    actor: Actor!
}

extend type Query @middleware(checks: ["auth:api"]) {
    productCategory(id: ID! @eq): ProductCategory! @find(model: "Shoppie\\ProductCategory")
    productSubCategory(id: ID! @eq): ProductSubCategory! @find(model: "Shoppie\\ProductSubCategory")
    iLikeShop(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@iLikeShop")
    inCart(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@inCart")
    isFavorite(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@isFavorite")
    order(order: String!): Order @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@order")
    featuredProducts(count: Int): [Product!] @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@featuredProducts")
    featuredShops(count: Int): [Shop!] @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@featuredShops")
}

extend type Query {
    shopCategories: [ShopCategory!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@ShopCategories")
    shop(id: ID! @eq): Shop! @find(model: "Shoppie\\Shop")
    shopByCode(shop: String!): Shop! @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@shop")
    shops(filters: ShopFilter): [Shop!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@shops")
    product(id: ID! @eq): Product! @find(model: "Shoppie\\Product")
    products(category: String filters: ProductFilter): [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@products")
    searchProducts(name: String!): [Product!] @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@searchProducts")
    searchShops(name: String!): [Shop!] @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@searchShops")
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    createBrand(shop: String! brand: ShopResource!): ProductBrand! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@createBrand")
    editBrand(brandId: ID! brand: ShopResource!): ProductBrand! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@editBrand")
    createCategory(shop: String! category: ShopResource!): ProductCategory! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@createCategory")
    createShopCategory(category: ShopResource!): ShopCategory! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@createShopCategory")
    editCategory(categoryId: ID! category: ShopResource!): ProductCategory! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@editCategory")
    editShopCategory(categoryId: ID! category: ShopResource!): ShopCategory! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@editShopCategory")
    createSubCategory(categoryId: ID! subcategory: ShopResource!): ProductSubCategory! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@createSubCategory")
    editSubCategory(categoryId: ID! subcategory: ShopResource!): ProductSubCategory! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@editSubCategory")
    likeShop(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@likeShop")
    addToCart(id: ID! quantity: Int!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@addToCart")
    removeFromCart(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@removeFromCart")
    favouriteProduct(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@favourite")
    createProductOffer(productId: ID! offer: NewOffer!): ProductOffer @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@createProductOffer")
    updateOrder(update: OrderUpdate!): Product! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@updateOrder")
    updateStock(productId: ID! stock: StockUpdate!): Stock! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@updateStock")
    approvePayment(order: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@approvePayment")
}
