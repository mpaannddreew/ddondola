scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

interface Muddondozi @interface(resolveType: "Ddondola\\Http\\GraphQL\\Interfaces\\Muddondozi@resolveType") {
    id: ID!
    code: String!
    type: String!
    name: String!
    avatar: [Image!]
    coverPicture: Image!
    messages: [Message!]
    conversations: [Conversation!]
    contacts: [User!]
    profile: Profile!
}

type Country {
    id: ID!
    code: String!
    name: String!
    details: String! @method(name: "details")
    created_at: DateTime!
    updated_at: DateTime!
}

type Profile {
    phone_number: String
    about: String
    address: String
    email: String
}

type UserSettings {
    discount: String
}

type Notification {
    id: ID!
    notifiable: Muddondozi
    data: String! @method(name: "translatedData")
    read_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

type User implements Muddondozi {
    id: ID!
    code: String!
    type: String! @method(name: "type")
    name: String! @method(name: "name")
    first_name: String!
    last_name: String!
    email: String!
    cart: Cart @hasOne
    profile: Profile! @method(name: "resolveProfile")
    settings: UserSettings!
    active: Boolean!
    avatar: Image! @method(name: "avatar")
    coverPicture: Image! @method(name: "coverPicture")
    shops: [Shop!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedShops")
    orders: [Order!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@buyerOrders")
    favouriteProducts(filters: ProductFilter): [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedProducts")
    recommendedProducts: [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@recommendedProducts")
    followers: [User!] @paginate(builder: "Ddondola\\Http\\GraphQL\\Queries\\AccountQuery@paginatedFollowers")
    followerCount: Int! @method(name: "followerCount")
    following: [User!] @paginate(builder: "Ddondola\\Http\\GraphQL\\Queries\\AccountQuery@paginatedFollowing")
    followingCount: Int! @method(name: "followingCount")
    notifications: [Notification!] @paginate(builder: "Ddondola\\Http\\GraphQL\\Queries\\AccountQuery@notifications")
    messages: [Message!] @paginate(builder: "Messenger\\Http\\GraphQL\\Queries\\MessengerQuery@messages")
    conversations: [Conversation!] @paginate(builder: "Messenger\\Http\\GraphQL\\Queries\\MessengerQuery@conversations")
    contacts: [User!] @paginate(builder: "Messenger\\Http\\GraphQL\\Queries\\MessengerQuery@contacts")
    activity: [Review!] @paginate(builder: "Activity\\Http\\GraphQL\\Queries\\ActivityQuery@communityActivity")
    created_at: DateTime!
    updated_at: DateTime!
}

type Image {
    url: String!
}

type Query {
    me: User! @auth
    users(myCountry: Boolean): [User!]! @paginate(builder: "Ddondola\\Http\\GraphQL\\Queries\\AccountQuery@paginatedUsers")
    user(id: ID @eq): User @find(model: "Ddondola\\User")
    userByCode(user: String!): User @field(resolver: "Ddondola\\Http\\GraphQL\\Queries\\AccountQuery@user")
    iFollowUser(id: ID!): Boolean! @field(resolver: "Ddondola\\Http\\GraphQL\\Queries\\AccountQuery@iFollowUser")
    searchUsers(name: String!): [User!] @field(resolver: "Ddondola\\Http\\GraphQL\\Queries\\AccountQuery@searchUsers")
}

type Mutation {
    createUser(
        first_name: String @rules(apply: ["required"])
        last_name: String @rules(apply: ["required"])
        email: String @rules(apply: ["required", "email", "unique:users,email"])
        password: String @bcrypt
    ): User @create(model: "Ddondola\\User")

    updateUser(
        id: ID @rules(apply: ["required"])
        first_name: String
        last_name: String
        email: String @rules(apply: ["email"])
    ): User @update(model: "Ddondola\\User")
    followUser(id: ID!): Boolean! @field(resolver: "Ddondola\\Http\\GraphQL\\Mutations\\AccountMutator@followUser")
}


#import shoppie.graphql
#import activity.graphql
#import messenger.graphql
