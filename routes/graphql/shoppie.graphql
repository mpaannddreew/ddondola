type ShopProfile {
    phone_number: String!
    email: String!
    description: String
    address: String
}

type ShopSettings {
    discount: String
}

type ShopCategory {
    id: ID!
    code: String!
    name: String!
    description: String
    shops(categoryId: Int): [Shop!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedShops")
    created_at: DateTime!
    updated_at: DateTime!
}

type Shop {
    id: ID!
    code: String!
    name: String!
    category: ShopCategory! @belongsTo
    owner: User! @belongsTo
    profile: ShopProfile!
    settings: ShopSettings!
    active: Boolean!
    likes: Int! @method(name: "likeCount")
    categories: [ProductCategory!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedCategories")
    subcategories: [ProductSubCategory!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedSubcategories")
    subCategoriesCount: Int! @method(name: "subCategoriesCount")
    brands: [ProductBrand!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedBrands")
    reviews: [Review!] @paginate(builder: "Activity\\Http\\GraphQL\\Queries\\ActivityQuery@paginatedReviews")
    reviewCount: Int! @method(name: "reviewCount")
    products(filters: ProductFilter): [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedProducts")
    productCount: Int! @method(name: "productCount")
    created_at: DateTime!
    updated_at: DateTime!
}

type ProductCategory {
    id: ID!
    code: String!
    name: String!
    shop: Shop! @belongsTo
    description: String
    categories: [ProductSubCategory!] @hasMany(type: "paginator")
    categoryCount: Int! @method(name: "categoryCount")
    products(filters: ProductFilter): [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedProducts")
    productCount: Int! @method(name: "productCount")
    created_at: DateTime!
    updated_at: DateTime!
}

type ProductSubCategory {
    id: ID!
    code: String!
    name: String!
    category: ProductCategory! @belongsTo
    description: String
    products(filters: ProductFilter): [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedProducts")
    productCount: Int! @method(name: "productCount")
    created_at: DateTime!
    updated_at: DateTime!
}

type ProductBrand {
    id: ID!
    code: String!
    name: String!
    shop: Shop! @belongsTo
    description: String
    products(filters: ProductFilter): [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedProducts")
    productCount: Int! @method(name: "productCount")
    created_at: DateTime!
    updated_at: DateTime!
}

type ProductSettings {
    minimum_stock: String!
}

type CartPivot {
    id: ID!
    price: String!
    quantity: String!
    sum: Int! @method(name: "sum")
    created_at: DateTime!
    updated_at: DateTime!
}

type OrderPivot {
    id: ID!
    price: String!
    quantity: String!
    sum: Int! @method(name: "sum")
    delivered: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
}

type Product {
    id: ID!
    code: String!
    name: String!
    category: ProductCategory! @method(name: "category")
    subcategory: ProductSubCategory! @belongsTo
    brand: ProductBrand! @belongsTo
    price: String!
    description: String
    quantity: Int! @method(name: "quantity")
    active: Boolean!
    settings: ProductSettings!
    offers: [ProductOffer!] @hasMany(type: "paginator")
    stock(type: String!): [Stock] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@paginatedStock")
    relatedProducts: [Product!] @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@relatedProducts")
    reviews: [Review!] @paginate(builder: "Activity\\Http\\GraphQL\\Queries\\ActivityQuery@paginatedReviews")
    reviewCount: Int! @method(name: "reviewCount")
    orders: [Order!] @belongsToMany(type: "paginator")
    carts: [Cart!] @belongsToMany(type: "paginator")
    discount: Int! @method(name: "discount")
    cartPivot: CartPivot
    orderPivot: OrderPivot
    created_at: DateTime!
    updated_at: DateTime!
}


type Cart {
    id: ID!
    products: [Product!] @hasMany
    productCount: Int! @method(name: "productCount")
    sum: Int! @method(name: "sum")
    created_at: DateTime!
    updated_at: DateTime!
}

type Order {
    id: ID!
    code: String!
    amount: String!
    owner: User! @belongsTo
    cleared: Boolean!
    products: [Product!] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

enum StockType {
    STOCK_OUT @enum(value: "out")
    STOCK_IN @enum(value: "in")
}

type Stock {
    id: ID!
    quantity: String!
    type: StockType!
    product: Product! @belongsTo
    note: String
    user: User @rename(attribute: "addedBy")
    created_at: DateTime!
    updated_at: DateTime!
}

type ProductOffer {
    id: ID!
    product: Product! @belongsTo
    discount: String!
    start_date: DateTime!
    end_date: DateTime!
    created_at: DateTime!
    updated_at: DateTime!
}

input NewShop {
    categoryId: String!
    name: String!
    email: String!
    phone_number: String!
    description: String!
    address: String!
}

input NewBrand {
    name: String!
    description: String
}

input NewProductCategory {
    name: String!
    description: String
}

input NewProductSubCategory {
    name: String!
    description: String
}

input NewStock {
    type: StockType!
    quantity: Int!
    note: String!
}

input NewOffer {
    price: String!
    start_date: DateTime!
    end_date: DateTime!
}

input NewProduct {
    categoryId: ID!
    brandId: ID!
    name: String!
    price: String!
    description: String
    active: Boolean!
    minimum_stock: String!
    stock: NewStock!
}

input ProductFilter {
    ordering: String
    brandIds: String
}

extend type Query {
    shopCategories: [ShopCategory!] @all(model: "Shoppie\\ShopCategory")
    shop(id: ID! @eq): Shop! @find(model: "Shoppie\\Shop")
    shops(categoryId: Int): [Shop!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@shops")
    product(id: ID! @eq): Product! @find(model: "Shoppie\\Product")
    products(filters: ProductFilter): [Product!] @paginate(builder: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@products")
    productCategory(id: ID! @eq): ProductCategory! @find(model: "Shoppie\\ProductCategory")
    productSubCategory(id: ID! @eq): ProductSubCategory! @find(model: "Shoppie\\ProductSubCategory")
    iLikeShop(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@iLikeShop")
    inCart(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@inCart")
    isFavorite(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@isFavorite")
    searchProducts(name: String!): [Product!] @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@searchProducts")
    searchShops(name: String!): [Shop!] @field(resolver: "Shoppie\\Http\\GraphQL\\Queries\\ShoppieQuery@searchShops")
}

extend type Mutation {
    createShop(shop: NewShop!): Shop! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@createShop")
    createBrand(shopId: ID! brand: NewBrand!): ProductBrand! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@createBrand")
    createCategory(shopId: ID! category: NewProductCategory!): ProductCategory! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@createCategory")
    createSubCategory(categoryId: ID! subcategory: NewProductSubCategory!): ProductSubCategory! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@createSubCategory")
    createProduct(product: NewProduct!): Product! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@createProduct")
    updateStock(productId: ID! stock: NewStock!): Stock! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@updateStock")
    likeShop(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@likeShop")
    addToCart(id: ID! quantity: Int!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@addToCart")
    removeFromCart(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@removeFromCart")
    addToFavorites(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@addToFavorites")
    removeFromFavorites(id: ID!): Boolean! @field(resolver: "Shoppie\\Http\\GraphQL\\Mutations\\ShoppieMutator@removeFromFavorites")
}
