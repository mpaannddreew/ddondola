type ShopCategory {
    id: ID!
    name: String!
    description: String!
    code: String!
    shops(offset: Int, limit: Int): [Shop!]
    created_at: DateTime!
    updated_at: DateTime!
}

type Shop implements Converser {
    id: ID!
    code: String!
    name: String!
    owner: User!
    type: String! @method(name: "type")
    products(offset: Int, limit: Int): [Product!] @field(resolver: "Ddondola\\Http\\GraphQL\\Resolvers\\ShoppieResolver@shopProducts")
    followers(offset: Int, limit: Int): [User!] @field(resolver: "Ddondola\\Http\\GraphQL\\Resolvers\\ShoppieResolver@followers")
    followerCount: Int! @method(name: "followerCount")
    category: ShopCategory!
    active: Boolean!
    reviews: [Review!]
    created_at: DateTime!
    updated_at: DateTime!
}

type ProductCategory {
    id: ID!
    name: String!
    description: String!
    code: String!
    shop: Shop!
    products(offset: Int, limit: Int): [Product!]
    created_at: DateTime!
    updated_at: DateTime!
}

type Product {
    id: ID!
    code: String!
    name: String!
    description: String!
    price: String!
    published: Boolean!
    category: ProductCategory!
    shop: Shop!
    reviews: [Review!]
    created_at: DateTime!
    updated_at: DateTime!
}

type Stock {
    id: ID!
    product: Product!
    added_by: User
    type: String!
}

type Cart {
    id: ID!
    empty: Boolean!
    sum: Int! @method(name: "sum")
}

type Order {
    id: ID!
}

extend type Query {

}

extend type Mutation {

}