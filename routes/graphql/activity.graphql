type Review {
    id: ID!
    rating: Int!
    body: String!
    reviewer: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

input Reviewable {
    id: ID!
    type: String!
}

input ReviewData {
    rating: Int
    body: String
}

type Reviewed {
    isReviewed: Boolean!
    review: Review
}

type Subject {
    type: String!
    user: User
    shop: Shop
    product: Product
}

type Foreign {
    type: String!
    review: Review
    offer: ProductOffer
}

type Activity {
    id: ID!
    verb: String!
    actor: Muddondozi!
    subject: Subject! @method(name: "translatedSubject")
    foreign: Foreign @method(name: "translatedForeign")
    created_at: DateTime!
    updated_at: DateTime!
}

extend type Query {
    review(id: ID! @eq): Review! @find(model: "Activity\\Review")
    isReviewed(entity: Reviewable!): Reviewed! @field(resolver: "Activity\\Http\\GraphQL\\Queries\\ActivityQuery@isReviewed")
}

extend type Mutation {
    addReview(entity: Reviewable! review: ReviewData!): Review! @field(resolver: "Activity\\Http\\GraphQL\\Mutations\\ActivityMutator@addReview")
    editReview(id: ID! review: ReviewData!): Review! @field(resolver: "Activity\\Http\\GraphQL\\Mutations\\ActivityMutator@editReview")
}